{"version":3,"sources":["features/event/event-list/event-list-attendee/event-list-attendee.component.jsx","features/event/event-list/event-list-item/event-list-item.component.jsx","features/event/event-list/event-list.component.jsx","features/event/event-form/event-form.component.jsx","features/event/event-dashboard/events-from-dashboard.js","features/event/event-dashboard/event-dashboard.component.jsx","features/nav/nav-bar/nav-bar.component.jsx","app/layout/App.jsx","serviceWorker.js","index.js"],"names":["EventListAttendee","this","props","attendee","name","photoURL","List","Item","Image","as","size","circular","src","Component","EventListItem","event","hostPhotoURL","title","hostedBy","date","venue","description","attendees","Segment","Group","Content","Header","Description","Icon","secondary","horizontal","map","key","id","clearing","Button","color","floated","content","EventList","events","EventForm","cancelFormOpen","Form","Field","placeholder","type","positive","onClick","eventsFromDashboard","category","city","EventDashboard","state","isOpen","handleIsOpenToggle","setState","Grid","Column","width","NavBar","Menu","inverted","fixed","Container","header","alt","position","basic","style","marginLeft","App","className","Boolean","window","location","hostname","match","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1bbb132e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { List, Image } from \"semantic-ui-react\";\r\n\r\nclass EventListAttendee extends Component {\r\n  render() {\r\n    const { name, photoURL } = this.props.attendee;\r\n    return (\r\n      <List.Item>\r\n        <Image as={name} size='mini' circular src={photoURL} />\r\n      </List.Item>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventListAttendee;\r\n","import React, { Component } from \"react\";\r\nimport { Segment, Item, Icon, List, Button } from \"semantic-ui-react\";\r\nimport EventListAttendee from \"../event-list-attendee/event-list-attendee.component\";\r\nclass EventListItem extends Component {\r\n  render() {\r\n    const { hostPhotoURL, title, hostedBy, date, venue,description,attendees } = this.props.event;\r\n\r\n    return (\r\n      <Segment.Group>\r\n        <Segment>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Image size='tiny' circular src={hostPhotoURL} />\r\n              <Item.Content>\r\n                <Item.Header as='a'>{title}</Item.Header>\r\n                <Item.Description>\r\n                  Hosted by <a>{hostedBy}</a>\r\n                </Item.Description>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Segment>\r\n        <Segment>\r\n          <span>\r\n            <Icon name='clock' /> {date} |\r\n            <Icon name='marker' /> {venue}\r\n          </span>\r\n        </Segment>\r\n        <Segment secondary>\r\n          <List horizontal>\r\n            {\r\n              attendees.map(attendee => (\r\n                <EventListAttendee key={attendee.id} attendee={attendee}/>\r\n              ))\r\n            }\r\n          </List>\r\n        </Segment>\r\n        <Segment clearing>\r\n          <span>{description}</span>\r\n          <Button as='a' color='teal' floated='right' content='View' />\r\n        </Segment>\r\n      </Segment.Group>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventListItem;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport EventListItem from \"./event-list-item/event-list-item.component\";\r\nclass EventList extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {\r\n          this.props.events.map(event => (\r\n            <EventListItem key={event.id} event={event} />\r\n          ))\r\n        }\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","import React, { Component } from \"react\";\r\nimport { Segment, Form, Button } from \"semantic-ui-react\";\r\n\r\nclass EventForm extends Component {\r\n  render() {\r\n    const  {cancelFormOpen} = this.props;\r\n    return (\r\n      <Segment>\r\n        <Form>\r\n          <Form.Field>\r\n            <label>Event Title</label>\r\n            <input placeholder='First Name' />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Event Date</label>\r\n            <input type='date' placeholder='Event Date' />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>City</label>\r\n            <input placeholder='City event is taking place' />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Venue</label>\r\n            <input placeholder='Enter the Venue of the event' />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Hosted By</label>\r\n            <input placeholder='Enter the name of person hosting' />\r\n          </Form.Field>\r\n          <Button positive type='submit'>\r\n            Submit\r\n          </Button>\r\n          <Button type='button' onClick={cancelFormOpen}>Cancel</Button>\r\n        </Form>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\nexport default EventForm;\r\n","const eventsFromDashboard = [\r\n    {\r\n      id: \"1\",\r\n      title: \"Trip to Tower of London\",\r\n      date: \"2018-03-27T11:00:00+00:00\",\r\n      category: \"culture\",\r\n      description:\r\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.\",\r\n      city: \"London, UK\",\r\n      venue: \"Tower of London, St Katharine's & Wapping, London\",\r\n      hostedBy: \"Bob\",\r\n      hostPhotoURL: \"https://randomuser.me/api/portraits/men/20.jpg\",\r\n      attendees: [\r\n        {\r\n          id: \"a\",\r\n          name: \"Bob\",\r\n          photoURL: \"https://randomuser.me/api/portraits/men/20.jpg\"\r\n        },\r\n        {\r\n          id: \"b\",\r\n          name: \"Tom\",\r\n          photoURL: \"https://randomuser.me/api/portraits/men/22.jpg\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: \"2\",\r\n      title: \"Trip to Punch and Judy Pub\",\r\n      date: \"2018-03-28T14:00:00+00:00\",\r\n      category: \"drinks\",\r\n      description:\r\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.\",\r\n      city: \"London, UK\",\r\n      venue: \"Punch & Judy, Henrietta Street, London, UK\",\r\n      hostedBy: \"Tom\",\r\n      hostPhotoURL: \"https://randomuser.me/api/portraits/men/22.jpg\",\r\n      attendees: [\r\n        {\r\n          id: \"b\",\r\n          name: \"Tom\",\r\n          photoURL: \"https://randomuser.me/api/portraits/men/22.jpg\"\r\n        },\r\n        {\r\n          id: \"a\",\r\n          name: \"Bob\",\r\n          photoURL: \"https://randomuser.me/api/portraits/men/20.jpg\"\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  export default eventsFromDashboard;","import React, { Component } from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport EventList from \"../event-list/event-list.component\";\r\nimport EventForm from \"../event-form/event-form.component\";\r\nimport eventsFromDashboard from \"./events-from-dashboard\";\r\n\r\nclass EventDashboard extends Component {\r\n  state = {\r\n    events: eventsFromDashboard,\r\n    isOpen: false\r\n  };\r\n\r\n  handleIsOpenToggle = () => {\r\n    this.setState(({ isOpen }) => ({ isOpen: !isOpen }));\r\n  };\r\n  render() {\r\n    const { events, isOpen } = this.state;\r\n    return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          <EventList events={events} />\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>\r\n          <Button\r\n            positive\r\n            content='Create Event'\r\n            onClick={this.handleIsOpenToggle}\r\n          />\r\n          {isOpen && <EventForm cancelFormOpen={this.handleIsOpenToggle} />}\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventDashboard;\r\n","import React, { Component } from \"react\";\r\nimport { Menu, Container, Button } from \"semantic-ui-react\";\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <Menu inverted fixed='top'>\r\n        <Container>\r\n          <Menu.Item header>\r\n            <img src='assets/logo.png' alt='logo' />\r\n            Re-vents\r\n          </Menu.Item>\r\n          <Menu.Item name='Events' />\r\n          <Menu.Item>\r\n            <Button floated='right' positive inverted content='Create Event' />\r\n          </Menu.Item>\r\n          <Menu.Item position='right'>\r\n            <Button basic inverted content='Login' />\r\n            <Button\r\n              basic\r\n              inverted\r\n              content='Sign Out'\r\n              style={{ marginLeft: \"0.5em\" }}\r\n            />\r\n          </Menu.Item>\r\n        </Container>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component, Fragment } from \"react\";\nimport EventDashboard from \"../../features/event/event-dashboard/event-dashboard.component\";\nimport NavBar from \"../../features/nav/nav-bar/nav-bar.component\";\nimport { Container } from \"semantic-ui-react\";\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <NavBar />\n        <Container className=\"main\">\n          <EventDashboard />\n        </Container>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootEl = document.getElementById('root');\n\nlet render = () => {\n    ReactDOM.render(<App />, rootEl)\n}\n\nif (module.hot) {\n    module.hot.accept('./app/layout/App', () => {\n        setTimeout(render);\n    })\n}\n\nrender();\n\nserviceWorker.unregister();\n"],"sourceRoot":""}