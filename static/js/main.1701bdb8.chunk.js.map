{"version":3,"sources":["features/event/event-list/event-list-attendee/event-list-attendee.component.jsx","features/event/event-list/event-list-item/event-list-item.component.jsx","features/event/event-list/event-list.component.jsx","features/event/event-form/event-form.component.jsx","features/event/event-dashboard/events-from-dashboard.js","features/event/event-dashboard/event-dashboard.component.jsx","features/nav/nav-bar/nav-bar.component.jsx","app/layout/App.jsx","serviceWorker.js","index.js"],"names":["EventListAttendee","photoURL","this","props","attendee","List","Item","Image","as","size","circular","src","Component","EventListItem","event","selectEvent","deleteEvent","Segment","Group","hostPhotoURL","Content","Header","title","Description","hostedBy","Icon","name","date","venue","secondary","horizontal","attendees","map","key","id","clearing","description","Button","color","floated","content","onClick","EventList","events","EventForm","state","city","handleFormSubmit","evt","preventDefault","updateEvent","createEvent","handleInputChange","target","value","setState","selectedEvent","cancelFormOpen","Form","onSubmit","autoComplete","Field","onChange","placeholder","type","positive","eventsFromDashboard","category","EventDashboard","isOpen","handleCreateFormOpen","handleCreateFormCancel","handleCreateEvent","newEvent","cuid","handleSelectEvent","handleUpdateEvent","updatedEvent","handleDeleteEvent","filter","e","Grid","Column","width","NavBar","Menu","inverted","fixed","Container","header","alt","position","basic","style","marginLeft","App","className","Boolean","window","location","hostname","match","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1701bdb8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { List, Image } from \"semantic-ui-react\";\r\n\r\nclass EventListAttendee extends Component {\r\n  render() {\r\n    const { photoURL } = this.props.attendee;\r\n    return (\r\n      <List.Item>\r\n        <Image as='a' size='mini' circular src={photoURL} />\r\n      </List.Item>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventListAttendee;\r\n","import React, { Component } from \"react\";\r\nimport { Segment, Item, Icon, List, Button } from \"semantic-ui-react\";\r\nimport EventListAttendee from \"../event-list-attendee/event-list-attendee.component\";\r\nclass EventListItem extends Component {\r\n  render() {\r\n    const { event, selectEvent,deleteEvent } = this.props;\r\n    return (\r\n      <Segment.Group>\r\n        <Segment>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Image size='tiny' circular src={event.hostPhotoURL} />\r\n              <Item.Content>\r\n                <Item.Header>{event.title}</Item.Header>\r\n                <Item.Description>Hosted by {event.hostedBy}</Item.Description>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Segment>\r\n        <Segment>\r\n          <span>\r\n            <Icon name='clock' /> {event.date} |\r\n            <Icon name='marker' /> {event.venue}\r\n          </span>\r\n        </Segment>\r\n        <Segment secondary>\r\n          <List horizontal>\r\n            {event.attendees &&\r\n              event.attendees.map(attendee => (\r\n                <EventListAttendee key={attendee.id} attendee={attendee} />\r\n              ))}\r\n          </List>\r\n        </Segment>\r\n        <Segment clearing>\r\n          <span>{event.description}</span>\r\n          <Button\r\n            as='a'\r\n            color='red'\r\n            floated='right'\r\n            content='Delete'\r\n            onClick={() => deleteEvent(event.id)}\r\n          />\r\n          <Button\r\n            as='a'\r\n            color='teal'\r\n            floated='right'\r\n            content='View'\r\n            onClick={() => selectEvent(event)}\r\n          />\r\n        </Segment>\r\n      </Segment.Group>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventListItem;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport EventListItem from \"./event-list-item/event-list-item.component\";\r\nclass EventList extends Component {\r\n  render() {\r\n    const { events, selectEvent, deleteEvent } = this.props;\r\n\r\n    return (\r\n      <Fragment>\r\n        {events.map(event => (\r\n          <EventListItem\r\n            key={event.id}\r\n            event={event}\r\n            selectEvent={selectEvent}\r\n            deleteEvent={deleteEvent}\r\n          />\r\n        ))}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","import React, { Component } from \"react\";\r\nimport { Segment, Form, Button } from \"semantic-ui-react\";\r\n\r\nclass EventForm extends Component {\r\n  state = {\r\n    title: \"\",\r\n    date: \"\",\r\n    city: \"\",\r\n    venue: \"\",\r\n    hostedBy: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.selectedEvent != null) {\r\n      this.setState({\r\n        ...this.props.selectedEvent\r\n      });\r\n    }\r\n  }\r\n  handleFormSubmit = evt => {\r\n    evt.preventDefault();\r\n    if (this.state.id) {\r\n      this.props.updateEvent(this.state);\r\n    } else {\r\n      this.props.createEvent(this.state);\r\n    }\r\n  };\r\n\r\n  handleInputChange = evt => {\r\n    const { name, value } = evt.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { cancelFormOpen } = this.props;\r\n    const { title, date, city, venue, hostedBy } = this.state;\r\n    return (\r\n      <Segment>\r\n        <Form onSubmit={this.handleFormSubmit} autoComplete='off'>\r\n          <Form.Field>\r\n            <label>Event Title</label>\r\n            <input\r\n              name='title'\r\n              value={title}\r\n              onChange={this.handleInputChange}\r\n              placeholder='Event Title'\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Event Date</label>\r\n            <input\r\n              type='date'\r\n              name='date'\r\n              value={date}\r\n              onChange={this.handleInputChange}\r\n              placeholder='Event Date'\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>City</label>\r\n            <input\r\n              name='city'\r\n              value={city}\r\n              onChange={this.handleInputChange}\r\n              placeholder='City event is taking place'\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Venue</label>\r\n            <input\r\n              name='venue'\r\n              value={venue}\r\n              onChange={this.handleInputChange}\r\n              placeholder='Enter the Venue of the event'\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Hosted By</label>\r\n            <input\r\n              name='hostedBy'\r\n              value={hostedBy}\r\n              onChange={this.handleInputChange}\r\n              placeholder='Enter the name of person hosting'\r\n            />\r\n          </Form.Field>\r\n          <Button positive type='submit'>\r\n            Submit\r\n          </Button>\r\n          <Button type='button' onClick={cancelFormOpen}>\r\n            Cancel\r\n          </Button>\r\n        </Form>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventForm;\r\n","const eventsFromDashboard = [\r\n    {\r\n      id: \"1\",\r\n      title: \"Trip to Tower of London\",\r\n      date: \"2018-03-27\",\r\n      category: \"culture\",\r\n      description:\r\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.\",\r\n      city: \"London, UK\",\r\n      venue: \"Tower of London, St Katharine's & Wapping, London\",\r\n      hostedBy: \"Bob\",\r\n      hostPhotoURL: \"https://randomuser.me/api/portraits/men/20.jpg\",\r\n      attendees: [\r\n        {\r\n          id: \"a\",\r\n          name: \"Bob\",\r\n          photoURL: \"https://randomuser.me/api/portraits/men/20.jpg\"\r\n        },\r\n        {\r\n          id: \"b\",\r\n          name: \"Tom\",\r\n          photoURL: \"https://randomuser.me/api/portraits/men/22.jpg\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: \"2\",\r\n      title: \"Trip to Punch and Judy Pub\",\r\n      date: \"2018-03-28\",\r\n      category: \"drinks\",\r\n      description:\r\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.\",\r\n      city: \"London, UK\",\r\n      venue: \"Punch & Judy, Henrietta Street, London, UK\",\r\n      hostedBy: \"Tom\",\r\n      hostPhotoURL: \"https://randomuser.me/api/portraits/men/22.jpg\",\r\n      attendees: [\r\n        {\r\n          id: \"b\",\r\n          name: \"Tom\",\r\n          photoURL: \"https://randomuser.me/api/portraits/men/22.jpg\"\r\n        },\r\n        {\r\n          id: \"a\",\r\n          name: \"Bob\",\r\n          photoURL: \"https://randomuser.me/api/portraits/men/20.jpg\"\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  export default eventsFromDashboard;","import React, { Component } from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport EventList from \"../event-list/event-list.component\";\r\nimport EventForm from \"../event-form/event-form.component\";\r\nimport eventsFromDashboard from \"./events-from-dashboard\";\r\nimport cuid from \"cuid\";\r\n\r\nclass EventDashboard extends Component {\r\n  state = {\r\n    events: eventsFromDashboard,\r\n    isOpen: false,\r\n    selectedEvent: null\r\n  };\r\n\r\n  // handleIsOpenToggle = () => {\r\n  //   this.setState(({ isOpen }) => ({ isOpen: !isOpen }));\r\n  // };\r\n\r\n  handleCreateFormOpen = () => {\r\n    this.setState({\r\n      isOpen: true,\r\n      selectedEvent: null\r\n    });\r\n  };\r\n\r\n  handleCreateFormCancel = () => {\r\n    this.setState({\r\n      isOpen: false\r\n    });\r\n  };\r\n\r\n  handleCreateEvent = newEvent => {\r\n    newEvent.id = cuid();\r\n    newEvent.hostPhotoURL = \"/assets/user.png\";\r\n\r\n    this.setState(({ events }) => ({\r\n      events: [...events, newEvent],\r\n      isOpen: false\r\n    }));\r\n  };\r\n\r\n  handleSelectEvent = event => {\r\n    this.setState({\r\n      selectedEvent: event,\r\n      isOpen: true\r\n    });\r\n  };\r\n\r\n  handleUpdateEvent = updatedEvent => {\r\n    this.setState(({ events }) => ({\r\n      events: events.map(event => {\r\n        if (event.id === updatedEvent.id) {\r\n          return { ...updatedEvent };\r\n        } else {\r\n          return event;\r\n        }\r\n      }),\r\n      isOpen: false,\r\n      selectedEvent: null\r\n    }));\r\n  };\r\n\r\n  handleDeleteEvent = id => {\r\n    this.setState(({ events }) => ({\r\n      events: events.filter(e => e.id !== id)\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { events, isOpen, selectedEvent } = this.state;\r\n    return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          <EventList\r\n            events={events}\r\n            selectEvent={this.handleSelectEvent}\r\n            deleteEvent={this.handleDeleteEvent}\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>\r\n          <Button\r\n            positive\r\n            content='Create Event'\r\n            onClick={this.handleCreateFormOpen}\r\n          />\r\n          {isOpen && (\r\n            <EventForm\r\n              key={selectedEvent ? selectedEvent.id : 0}\r\n              updateEvent={this.handleUpdateEvent}\r\n              selectedEvent={selectedEvent}\r\n              createEvent={this.handleCreateEvent}\r\n              cancelFormOpen={this.handleCreateFormCancel}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventDashboard;\r\n","import React, { Component } from \"react\";\r\nimport { Menu, Container, Button } from \"semantic-ui-react\";\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <Menu inverted fixed='top'>\r\n        <Container>\r\n          <Menu.Item header>\r\n            <img src='/assets/logo.png' alt='logo' />\r\n            Re-vents\r\n          </Menu.Item>\r\n          <Menu.Item name='Events' />\r\n          <Menu.Item>\r\n            <Button floated='right' positive inverted content='Create Event' />\r\n          </Menu.Item>\r\n          <Menu.Item position='right'>\r\n            <Button basic inverted content='Login' />\r\n            <Button\r\n              basic\r\n              inverted\r\n              content='Sign Out'\r\n              style={{ marginLeft: \"0.5em\" }}\r\n            />\r\n          </Menu.Item>\r\n        </Container>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component, Fragment } from \"react\";\nimport EventDashboard from \"../../features/event/event-dashboard/event-dashboard.component\";\nimport NavBar from \"../../features/nav/nav-bar/nav-bar.component\";\nimport { Container } from \"semantic-ui-react\";\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <NavBar />\n        <Container className=\"main\">\n          <EventDashboard />\n        </Container>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootEl = document.getElementById('root');\n\nlet render = () => {\n    ReactDOM.render(<App />, rootEl)\n}\n\nif (module.hot) {\n    module.hot.accept('./app/layout/App', () => {\n        setTimeout(render);\n    })\n}\n\nrender();\n\nserviceWorker.unregister();\n"],"sourceRoot":""}