{"version":3,"sources":["features/event/event-list/event-list-attendee/event-list-attendee.component.jsx","features/event/event-list/event-list-item/event-list-item.component.jsx","features/event/event-list/event-list.component.jsx","features/event/event-form/event-form.component.jsx","features/event/event-dashboard/events-from-dashboard.js","features/event/event-dashboard/event-dashboard.component.jsx","features/nav/nav-bar/nav-bar.component.jsx","app/layout/App.jsx","serviceWorker.js","index.js"],"names":["EventListAttendee","photoURL","this","props","attendee","List","Item","Image","as","size","circular","src","Component","EventListItem","event","hostPhotoURL","title","hostedBy","date","venue","description","attendees","Segment","Group","Content","Header","Description","Icon","name","secondary","horizontal","map","key","id","clearing","Button","color","floated","content","EventList","events","EventForm","state","city","handleFormSubmit","evt","preventDefault","createEvent","console","log","handleInputChange","target","value","setState","cancelFormOpen","Form","onSubmit","autoComplete","Field","onChange","placeholder","type","positive","onClick","eventsFromDashboard","category","EventDashboard","isOpen","handleIsOpenToggle","handleCreateEvent","newEvent","cuid","Grid","Column","width","NavBar","Menu","inverted","fixed","Container","header","alt","position","basic","style","marginLeft","App","className","Boolean","window","location","hostname","match","rootEl","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce34cc97.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { List, Image } from \"semantic-ui-react\";\r\n\r\nclass EventListAttendee extends Component {\r\n  render() {\r\n    const { photoURL } = this.props.attendee;\r\n    return (\r\n      <List.Item>\r\n        <Image as='a' size='mini' circular src={photoURL} />\r\n      </List.Item>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventListAttendee;\r\n","import React, { Component } from \"react\";\r\nimport { Segment, Item, Icon, List, Button } from \"semantic-ui-react\";\r\nimport EventListAttendee from \"../event-list-attendee/event-list-attendee.component\";\r\nclass EventListItem extends Component {\r\n  render() {\r\n    const {\r\n      hostPhotoURL,\r\n      title,\r\n      hostedBy,\r\n      date,\r\n      venue,\r\n      description,\r\n      attendees\r\n    } = this.props.event;\r\n\r\n    return (\r\n      <Segment.Group>\r\n        <Segment>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Image size='tiny' circular src={hostPhotoURL} />\r\n              <Item.Content>\r\n                <Item.Header>{title}</Item.Header>\r\n                <Item.Description>Hosted by {hostedBy}</Item.Description>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Segment>\r\n        <Segment>\r\n          <span>\r\n            <Icon name='clock' /> {date} |\r\n            <Icon name='marker' /> {venue}\r\n          </span>\r\n        </Segment>\r\n        <Segment secondary>\r\n          <List horizontal>\r\n            {attendees &&\r\n              attendees.map(attendee => (\r\n                <EventListAttendee key={attendee.id} attendee={attendee} />\r\n              ))}\r\n          </List>\r\n        </Segment>\r\n        <Segment clearing>\r\n          <span>{description}</span>\r\n          <Button as='a' color='teal' floated='right' content='View' />\r\n        </Segment>\r\n      </Segment.Group>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventListItem;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport EventListItem from \"./event-list-item/event-list-item.component\";\r\nclass EventList extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {\r\n          this.props.events.map(event => (\r\n            <EventListItem key={event.id} event={event} />\r\n          ))\r\n        }\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","import React, { Component } from \"react\";\r\nimport { Segment, Form, Button } from \"semantic-ui-react\";\r\n\r\nclass EventForm extends Component {\r\n  state = {\r\n    title: \"\",\r\n    date: \"\",\r\n    city: \"\",\r\n    venue: \"\",\r\n    hostedBy: \"\"\r\n  };\r\n\r\n  handleFormSubmit = evt => {\r\n    evt.preventDefault();\r\n    this.props.createEvent(this.state);\r\n    console.log(this.state);\r\n  };\r\n\r\n  handleInputChange = (evt) => {\r\n    const {name, value } = evt.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { cancelFormOpen } = this.props;\r\n    const { title, date, city, venue, hostedBy } = this.state;\r\n    return (\r\n      <Segment>\r\n        <Form onSubmit={this.handleFormSubmit} autoComplete='off'>\r\n          <Form.Field>\r\n            <label>Event Title</label>\r\n            <input\r\n              name='title'\r\n              value={title}\r\n              onChange={this.handleInputChange}\r\n              placeholder='Event Title'\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Event Date</label>\r\n            <input\r\n              type='date'\r\n              name='date'\r\n              value={date}\r\n              onChange={this.handleInputChange}\r\n              placeholder='Event Date'\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>City</label>\r\n            <input\r\n              name='city'\r\n              value={city}\r\n              onChange={this.handleInputChange}\r\n              placeholder='City event is taking place'\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Venue</label>\r\n            <input\r\n              name='venue'\r\n              value={venue}\r\n              onChange={this.handleInputChange}\r\n              placeholder='Enter the Venue of the event'\r\n            />\r\n          </Form.Field>\r\n          <Form.Field>\r\n            <label>Hosted By</label>\r\n            <input\r\n              name='hostedBy'\r\n              value={hostedBy}\r\n              onChange={this.handleInputChange}\r\n              placeholder='Enter the name of person hosting'\r\n            />\r\n          </Form.Field>\r\n          <Button positive type='submit'>\r\n            Submit\r\n          </Button>\r\n          <Button type='button' onClick={cancelFormOpen}>\r\n            Cancel\r\n          </Button>\r\n        </Form>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventForm;\r\n","const eventsFromDashboard = [\r\n    {\r\n      id: \"1\",\r\n      title: \"Trip to Tower of London\",\r\n      date: \"2018-03-27T11:00:00+00:00\",\r\n      category: \"culture\",\r\n      description:\r\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.\",\r\n      city: \"London, UK\",\r\n      venue: \"Tower of London, St Katharine's & Wapping, London\",\r\n      hostedBy: \"Bob\",\r\n      hostPhotoURL: \"https://randomuser.me/api/portraits/men/20.jpg\",\r\n      attendees: [\r\n        {\r\n          id: \"a\",\r\n          name: \"Bob\",\r\n          photoURL: \"https://randomuser.me/api/portraits/men/20.jpg\"\r\n        },\r\n        {\r\n          id: \"b\",\r\n          name: \"Tom\",\r\n          photoURL: \"https://randomuser.me/api/portraits/men/22.jpg\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      id: \"2\",\r\n      title: \"Trip to Punch and Judy Pub\",\r\n      date: \"2018-03-28T14:00:00+00:00\",\r\n      category: \"drinks\",\r\n      description:\r\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.\",\r\n      city: \"London, UK\",\r\n      venue: \"Punch & Judy, Henrietta Street, London, UK\",\r\n      hostedBy: \"Tom\",\r\n      hostPhotoURL: \"https://randomuser.me/api/portraits/men/22.jpg\",\r\n      attendees: [\r\n        {\r\n          id: \"b\",\r\n          name: \"Tom\",\r\n          photoURL: \"https://randomuser.me/api/portraits/men/22.jpg\"\r\n        },\r\n        {\r\n          id: \"a\",\r\n          name: \"Bob\",\r\n          photoURL: \"https://randomuser.me/api/portraits/men/20.jpg\"\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  export default eventsFromDashboard;","import React, { Component } from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport EventList from \"../event-list/event-list.component\";\r\nimport EventForm from \"../event-form/event-form.component\";\r\nimport eventsFromDashboard from \"./events-from-dashboard\";\r\nimport cuid from \"cuid\";\r\n\r\nclass EventDashboard extends Component {\r\n  state = {\r\n    events: eventsFromDashboard,\r\n    isOpen: false\r\n  };\r\n\r\n  handleIsOpenToggle = () => {\r\n    this.setState(({ isOpen }) => ({ isOpen: !isOpen }));\r\n  };\r\n\r\n  handleCreateEvent = newEvent => {\r\n    newEvent.id = cuid();\r\n    newEvent.hostPhotoURL = \"/assets/user.png\";\r\n\r\n    this.setState(({ events }) => ({\r\n      events: [...events, newEvent],\r\n      isOpen: false\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { events, isOpen } = this.state;\r\n    return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          <EventList events={events} />\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>\r\n          <Button\r\n            positive\r\n            content='Create Event'\r\n            onClick={this.handleIsOpenToggle}\r\n          />\r\n          {isOpen && (\r\n            <EventForm\r\n              createEvent={this.handleCreateEvent}\r\n              cancelFormOpen={this.handleIsOpenToggle}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventDashboard;\r\n","import React, { Component } from \"react\";\r\nimport { Menu, Container, Button } from \"semantic-ui-react\";\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <Menu inverted fixed='top'>\r\n        <Container>\r\n          <Menu.Item header>\r\n            <img src='/assets/logo.png' alt='logo' />\r\n            Re-vents\r\n          </Menu.Item>\r\n          <Menu.Item name='Events' />\r\n          <Menu.Item>\r\n            <Button floated='right' positive inverted content='Create Event' />\r\n          </Menu.Item>\r\n          <Menu.Item position='right'>\r\n            <Button basic inverted content='Login' />\r\n            <Button\r\n              basic\r\n              inverted\r\n              content='Sign Out'\r\n              style={{ marginLeft: \"0.5em\" }}\r\n            />\r\n          </Menu.Item>\r\n        </Container>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component, Fragment } from \"react\";\nimport EventDashboard from \"../../features/event/event-dashboard/event-dashboard.component\";\nimport NavBar from \"../../features/nav/nav-bar/nav-bar.component\";\nimport { Container } from \"semantic-ui-react\";\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <NavBar />\n        <Container className=\"main\">\n          <EventDashboard />\n        </Container>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootEl = document.getElementById('root');\n\nlet render = () => {\n    ReactDOM.render(<App />, rootEl)\n}\n\nif (module.hot) {\n    module.hot.accept('./app/layout/App', () => {\n        setTimeout(render);\n    })\n}\n\nrender();\n\nserviceWorker.unregister();\n"],"sourceRoot":""}